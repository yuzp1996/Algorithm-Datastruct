{"Time":"2019-10-10T13:19:23.276108+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch"}
{"Time":"2019-10-10T13:19:23.277065+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Output":"=== RUN   TestBinarySearch\n"}
{"Time":"2019-10-10T13:19:23.277108+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Output":"Running Suite: BinarySearch Suite\n"}
{"Time":"2019-10-10T13:19:23.27713+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Output":"=================================\n"}
{"Time":"2019-10-10T13:19:23.277147+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Output":"Random Seed: \u001b[1m1570684763\u001b[0m\n"}
{"Time":"2019-10-10T13:19:23.277174+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Output":"Will run \u001b[1m6\u001b[0m of \u001b[1m6\u001b[0m specs\n"}
{"Time":"2019-10-10T13:19:23.2772+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Output":"\n"}
{"Time":"2019-10-10T13:19:23.277996+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Output":"\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\n"}
{"Time":"2019-10-10T13:19:23.278081+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Output":"\u001b[1m\u001b[32mRan 6 of 6 Specs in 0.002 seconds\u001b[0m\n"}
{"Time":"2019-10-10T13:19:23.278108+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m6 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-10-10T13:19:23.278463+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Output":"--- PASS: TestBinarySearch (0.00s)\n"}
{"Time":"2019-10-10T13:19:23.278495+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Elapsed":0}
{"Time":"2019-10-10T13:19:23.278742+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Output":"PASS\n"}
{"Time":"2019-10-10T13:19:23.280132+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Output":"coverage: 96.2% of statements\n"}
{"Time":"2019-10-10T13:19:23.28235+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Output":"ok  \tAlgorithm-Datastruct/golang/BinarySearch\t0.051s\tcoverage: 96.2% of statements\n"}
{"Time":"2019-10-10T13:19:23.282397+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/BinarySearch","Elapsed":0.051}
{"Time":"2019-10-10T13:19:23.34967+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph"}
{"Time":"2019-10-10T13:19:23.349803+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"=== RUN   TestGraph\n"}
{"Time":"2019-10-10T13:19:23.35011+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"Running Suite: Graph Suite\n"}
{"Time":"2019-10-10T13:19:23.350224+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"==========================\n"}
{"Time":"2019-10-10T13:19:23.350248+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"Random Seed: \u001b[1m1570684763\u001b[0m\n"}
{"Time":"2019-10-10T13:19:23.350307+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"Will run \u001b[1m1\u001b[0m of \u001b[1m1\u001b[0m specs\n"}
{"Time":"2019-10-10T13:19:23.350364+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"\n"}
{"Time":"2019-10-10T13:19:23.351535+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"[[0 0 0 0] [0 0 0 0] [0 0 0 0] [0 0 0 0]]\n"}
{"Time":"2019-10-10T13:19:23.351634+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"1 2\n"}
{"Time":"2019-10-10T13:19:23.351674+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"0\n"}
{"Time":"2019-10-10T13:19:23.3517+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"[[0 0 0 0] [0 0 5 0] [0 0 0 0] [0 0 0 0]]\n"}
{"Time":"2019-10-10T13:19:23.351832+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"[[0 0 0 0] [0 0 5 0] [0 0 0 0] [0 0 0 0]]\n"}
{"Time":"2019-10-10T13:19:23.3519+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"3 2\n"}
{"Time":"2019-10-10T13:19:23.351931+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"0\n"}
{"Time":"2019-10-10T13:19:23.35195+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"[[0 0 0 0] [0 0 5 0] [0 0 0 0] [0 0 4 0]]\n"}
{"Time":"2019-10-10T13:19:23.351991+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"\u001b[32m•\u001b[0m\n"}
{"Time":"2019-10-10T13:19:23.352463+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"\u001b[1m\u001b[32mRan 1 of 1 Specs in 0.002 seconds\u001b[0m\n"}
{"Time":"2019-10-10T13:19:23.354089+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m1 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-10-10T13:19:23.354211+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"--- PASS: TestGraph (0.00s)\n"}
{"Time":"2019-10-10T13:19:23.354269+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Elapsed":0}
{"Time":"2019-10-10T13:19:23.354314+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Output":"PASS\n"}
{"Time":"2019-10-10T13:19:23.354397+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Output":"coverage: 92.9% of statements\n"}
{"Time":"2019-10-10T13:19:23.354973+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Output":"ok  \tAlgorithm-Datastruct/golang/Graph/matrixGraph\t0.032s\tcoverage: 92.9% of statements\n"}
{"Time":"2019-10-10T13:19:23.35506+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Elapsed":0.033}
{"Time":"2019-10-10T13:19:23.38406+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph"}
{"Time":"2019-10-10T13:19:23.38412+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph","Output":"=== RUN   TestListGraph\n"}
{"Time":"2019-10-10T13:19:23.385824+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph","Output":"0 -\u003e 5 -\u003e 3 -\u003e nil\n"}
{"Time":"2019-10-10T13:19:23.385925+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph","Output":"1 -\u003e 2 -\u003e 4 -\u003e 3 -\u003e nil\n"}
{"Time":"2019-10-10T13:19:23.385955+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph","Output":"2 -\u003e 1 -\u003e 5 -\u003e nil\n"}
{"Time":"2019-10-10T13:19:23.385995+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph","Output":"3 -\u003e 4 -\u003e 1 -\u003e 0 -\u003e nil\n"}
{"Time":"2019-10-10T13:19:23.386013+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph","Output":"4 -\u003e 3 -\u003e 1 -\u003e nil\n"}
{"Time":"2019-10-10T13:19:23.386029+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph","Output":"5 -\u003e 6 -\u003e 2 -\u003e 0 -\u003e nil\n"}
{"Time":"2019-10-10T13:19:23.386045+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph","Output":"6 -\u003e 5 -\u003e nil\n"}
{"Time":"2019-10-10T13:19:23.386115+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph","Output":"--- PASS: TestListGraph (0.00s)\n"}
{"Time":"2019-10-10T13:19:23.386132+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph","Elapsed":0}
{"Time":"2019-10-10T13:19:23.38616+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Output":"PASS\n"}
{"Time":"2019-10-10T13:19:23.38686+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Output":"coverage: 97.4% of statements\n"}
{"Time":"2019-10-10T13:19:23.388846+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Output":"ok  \tAlgorithm-Datastruct/golang/Graph/ListGraph\t0.037s\tcoverage: 97.4% of statements\n"}
{"Time":"2019-10-10T13:19:23.38891+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Elapsed":0.038}
{"Time":"2019-10-10T13:19:23.962497+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Test":"TestPointontheGraphics"}
{"Time":"2019-10-10T13:19:23.962603+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Test":"TestPointontheGraphics","Output":"=== RUN   TestPointontheGraphics\n"}
{"Time":"2019-10-10T13:19:23.963008+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Test":"TestPointontheGraphics","Output":"Running Suite: PointontheGraphics Suite\n"}
{"Time":"2019-10-10T13:19:23.96307+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Test":"TestPointontheGraphics","Output":"=======================================\n"}
{"Time":"2019-10-10T13:19:23.963104+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Test":"TestPointontheGraphics","Output":"Random Seed: \u001b[1m1570684763\u001b[0m\n"}
{"Time":"2019-10-10T13:19:23.963124+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Test":"TestPointontheGraphics","Output":"Will run \u001b[1m1\u001b[0m of \u001b[1m1\u001b[0m specs\n"}
{"Time":"2019-10-10T13:19:23.963147+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Test":"TestPointontheGraphics","Output":"\n"}
{"Time":"2019-10-10T13:19:23.96445+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Test":"TestPointontheGraphics","Output":"left/1 is 2, right/1 is 5\n"}
{"Time":"2019-10-10T13:19:23.964504+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Test":"TestPointontheGraphics","Output":"down/1 is 1, up/1 is 4\n"}
{"Time":"2019-10-10T13:19:23.964522+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Test":"TestPointontheGraphics","Output":"left/1 is 2, right/1 is 5\n"}
{"Time":"2019-10-10T13:19:23.96454+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Test":"TestPointontheGraphics","Output":"down/1 is 1, up/1 is 4\n"}
{"Time":"2019-10-10T13:19:23.964569+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Test":"TestPointontheGraphics","Output":"left/1 is 2, right/1 is 5\n"}
{"Time":"2019-10-10T13:19:23.964614+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Test":"TestPointontheGraphics","Output":"down/1 is 2, up/1 is 5\n"}
{"Time":"2019-10-10T13:19:23.964634+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Test":"TestPointontheGraphics","Output":"roundid is 1\n"}
{"Time":"2019-10-10T13:19:23.964651+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Test":"TestPointontheGraphics","Output":"roundid is 2\n"}
{"Time":"2019-10-10T13:19:23.964673+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Test":"TestPointontheGraphics","Output":"roundid is 3\n"}
{"Time":"2019-10-10T13:19:23.96469+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Test":"TestPointontheGraphics","Output":"\u001b[32m•\u001b[0m\n"}
{"Time":"2019-10-10T13:19:23.96471+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Test":"TestPointontheGraphics","Output":"\u001b[1m\u001b[32mRan 1 of 1 Specs in 0.002 seconds\u001b[0m\n"}
{"Time":"2019-10-10T13:19:23.964743+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Test":"TestPointontheGraphics","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m1 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-10-10T13:19:23.964782+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Test":"TestPointontheGraphics","Output":"--- PASS: TestPointontheGraphics (0.00s)\n"}
{"Time":"2019-10-10T13:19:23.964798+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Test":"TestPointontheGraphics","Elapsed":0}
{"Time":"2019-10-10T13:19:23.964819+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Output":"PASS\n"}
{"Time":"2019-10-10T13:19:23.965238+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Output":"coverage: 93.3% of statements\n"}
{"Time":"2019-10-10T13:19:23.967118+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Output":"ok  \tAlgorithm-Datastruct/golang/PointontheGraphics\t0.034s\tcoverage: 93.3% of statements\n"}
{"Time":"2019-10-10T13:19:23.967174+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/PointontheGraphics","Elapsed":0.034}
{"Time":"2019-10-10T13:19:25.898672+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue"}
{"Time":"2019-10-10T13:19:25.89877+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"=== RUN   TestArrayqueue\n"}
{"Time":"2019-10-10T13:19:25.900648+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"Running Suite: Arrayqueue Suite\n"}
{"Time":"2019-10-10T13:19:25.900726+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"===============================\n"}
{"Time":"2019-10-10T13:19:25.900782+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"Random Seed: \u001b[1m1570684765\u001b[0m\n"}
{"Time":"2019-10-10T13:19:25.900806+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"Will run \u001b[1m4\u001b[0m of \u001b[1m4\u001b[0m specs\n"}
{"Time":"2019-10-10T13:19:25.900849+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"\n"}
{"Time":"2019-10-10T13:19:25.902035+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"Can Not Dequeue Now\n"}
{"Time":"2019-10-10T13:19:25.90253+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0mCan Not Enqueue Now\n"}
{"Time":"2019-10-10T13:19:25.902625+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"\u001b[32m•\u001b[0m\n"}
{"Time":"2019-10-10T13:19:25.902669+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"\u001b[1m\u001b[32mRan 4 of 4 Specs in 0.002 seconds\u001b[0m\n"}
{"Time":"2019-10-10T13:19:25.902695+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m4 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-10-10T13:19:25.902743+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"--- PASS: TestArrayqueue (0.00s)\n"}
{"Time":"2019-10-10T13:19:25.902763+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Elapsed":0}
{"Time":"2019-10-10T13:19:25.902782+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Output":"PASS\n"}
{"Time":"2019-10-10T13:19:25.904944+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Output":"coverage: 65.7% of statements\n"}
{"Time":"2019-10-10T13:19:25.906596+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Output":"ok  \tAlgorithm-Datastruct/golang/Queue/arrayqueue\t0.041s\tcoverage: 65.7% of statements\n"}
{"Time":"2019-10-10T13:19:25.906639+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Elapsed":0.041}
{"Time":"2019-10-10T13:19:26.01361+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion"}
{"Time":"2019-10-10T13:19:26.014162+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"=== RUN   TestRecursion\n"}
{"Time":"2019-10-10T13:19:26.014249+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"Running Suite: Recursion Suite\n"}
{"Time":"2019-10-10T13:19:26.014274+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"==============================\n"}
{"Time":"2019-10-10T13:19:26.014342+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"Random Seed: \u001b[1m1570684766\u001b[0m\n"}
{"Time":"2019-10-10T13:19:26.01442+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"Will run \u001b[1m3\u001b[0m of \u001b[1m3\u001b[0m specs\n"}
{"Time":"2019-10-10T13:19:26.014485+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"\n"}
{"Time":"2019-10-10T13:19:26.019391+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\n"}
{"Time":"2019-10-10T13:19:26.019487+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"\u001b[1m\u001b[32mRan 3 of 3 Specs in 0.005 seconds\u001b[0m\n"}
{"Time":"2019-10-10T13:19:26.019531+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m3 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-10-10T13:19:26.019583+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"--- PASS: TestRecursion (0.01s)\n"}
{"Time":"2019-10-10T13:19:26.019603+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Elapsed":0.01}
{"Time":"2019-10-10T13:19:26.019674+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Output":"PASS\n"}
{"Time":"2019-10-10T13:19:26.020222+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Output":"coverage: 91.2% of statements\n"}
{"Time":"2019-10-10T13:19:26.022143+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Output":"ok  \tAlgorithm-Datastruct/golang/Recursion\t0.037s\tcoverage: 91.2% of statements\n"}
{"Time":"2019-10-10T13:19:26.022184+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Recursion","Elapsed":0.037}
{"Time":"2019-10-10T13:19:26.089438+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue"}
{"Time":"2019-10-10T13:19:26.089559+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Output":"=== RUN   TestCyclequeue\n"}
{"Time":"2019-10-10T13:19:26.089848+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Output":"Running Suite: Cyclequeue Suite\n"}
{"Time":"2019-10-10T13:19:26.08989+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Output":"===============================\n"}
{"Time":"2019-10-10T13:19:26.089918+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Output":"Random Seed: \u001b[1m1570684766\u001b[0m\n"}
{"Time":"2019-10-10T13:19:26.089945+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Output":"Will run \u001b[1m3\u001b[0m of \u001b[1m3\u001b[0m specs\n"}
{"Time":"2019-10-10T13:19:26.089966+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Output":"\n"}
{"Time":"2019-10-10T13:19:26.091356+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Output":"\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\n"}
{"Time":"2019-10-10T13:19:26.091465+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Output":"\u001b[1m\u001b[32mRan 3 of 3 Specs in 0.002 seconds\u001b[0m\n"}
{"Time":"2019-10-10T13:19:26.091494+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m3 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-10-10T13:19:26.091542+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Output":"--- PASS: TestCyclequeue (0.00s)\n"}
{"Time":"2019-10-10T13:19:26.091561+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Elapsed":0}
{"Time":"2019-10-10T13:19:26.09158+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Output":"PASS\n"}
{"Time":"2019-10-10T13:19:26.092395+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Output":"coverage: 72.7% of statements\n"}
{"Time":"2019-10-10T13:19:26.09412+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Output":"ok  \tAlgorithm-Datastruct/golang/Queue/cyclequeue\t0.034s\tcoverage: 72.7% of statements\n"}
{"Time":"2019-10-10T13:19:26.094166+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Elapsed":0.034}
{"Time":"2019-10-10T13:19:26.690936+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort"}
{"Time":"2019-10-10T13:19:26.691032+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Output":"=== RUN   TestSort\n"}
{"Time":"2019-10-10T13:19:26.691573+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Output":"Running Suite: Sort Suite\n"}
{"Time":"2019-10-10T13:19:26.691686+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Output":"=========================\n"}
{"Time":"2019-10-10T13:19:26.691724+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Output":"Random Seed: \u001b[1m1570684766\u001b[0m\n"}
{"Time":"2019-10-10T13:19:26.691759+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Output":"Will run \u001b[1m6\u001b[0m of \u001b[1m6\u001b[0m specs\n"}
{"Time":"2019-10-10T13:19:26.691798+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Output":"\n"}
{"Time":"2019-10-10T13:19:26.693029+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Output":"\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\n"}
{"Time":"2019-10-10T13:19:26.693091+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Output":"\u001b[1m\u001b[32mRan 6 of 6 Specs in 0.002 seconds\u001b[0m\n"}
{"Time":"2019-10-10T13:19:26.693126+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m6 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-10-10T13:19:26.693165+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Output":"--- PASS: TestSort (0.00s)\n"}
{"Time":"2019-10-10T13:19:26.693203+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Elapsed":0}
{"Time":"2019-10-10T13:19:26.693223+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Output":"PASS\n"}
{"Time":"2019-10-10T13:19:26.694464+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Output":"coverage: 88.5% of statements\n"}
{"Time":"2019-10-10T13:19:26.696327+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Output":"ok  \tAlgorithm-Datastruct/golang/Sort\t0.033s\tcoverage: 88.5% of statements\n"}
{"Time":"2019-10-10T13:19:26.696382+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Sort","Elapsed":0.033}
{"Time":"2019-10-10T13:19:26.699508+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack","Output":"?   \tAlgorithm-Datastruct/golang/Stack\t[no test files]\n"}
{"Time":"2019-10-10T13:19:26.699544+08:00","Action":"skip","Package":"Algorithm-Datastruct/golang/Stack","Elapsed":0}
{"Time":"2019-10-10T13:19:27.262695+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/array","Output":"testing: warning: no tests to run\n"}
{"Time":"2019-10-10T13:19:27.262808+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/array","Output":"PASS\n"}
{"Time":"2019-10-10T13:19:27.264116+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/array","Output":"coverage: 0.0% of statements\n"}
{"Time":"2019-10-10T13:19:27.265454+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/array","Output":"ok  \tAlgorithm-Datastruct/golang/array\t0.013s\tcoverage: 0.0% of statements [no tests to run]\n"}
{"Time":"2019-10-10T13:19:27.265524+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/array","Elapsed":0.014}
{"Time":"2019-10-10T13:19:28.629194+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF"}
{"Time":"2019-10-10T13:19:28.629275+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"=== RUN   TestBF\n"}
{"Time":"2019-10-10T13:19:28.629715+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"Running Suite: BF Suite\n"}
{"Time":"2019-10-10T13:19:28.629776+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"=======================\n"}
{"Time":"2019-10-10T13:19:28.629852+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"Random Seed: \u001b[1m1570684768\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.629906+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"Will run \u001b[1m8\u001b[0m of \u001b[1m8\u001b[0m specs\n"}
{"Time":"2019-10-10T13:19:28.629943+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\n"}
{"Time":"2019-10-10T13:19:28.632003+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.632081+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[90m------------------------------\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.632136+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[91m\u001b[1m• Failure [0.001 seconds]\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.632168+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"BF\n"}
{"Time":"2019-10-10T13:19:28.632205+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[90m/Users/yuzhipeng/go/src/Algorithm-Datastruct/golang/String/BF/BF_test.go:10\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.632238+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"  find if there is the pattern\n"}
{"Time":"2019-10-10T13:19:28.632265+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"  \u001b[90m/Users/yuzhipeng/go/src/Algorithm-Datastruct/golang/String/BF/BF_test.go:12\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.632294+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"    \u001b[91m\u001b[1mRk can find the string [It]\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.632314+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"    \u001b[90m/Users/yuzhipeng/go/src/Algorithm-Datastruct/golang/String/BF/BF_test.go:44\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.632336+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\n"}
{"Time":"2019-10-10T13:19:28.632385+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"    \u001b[91mExpected\n"}
{"Time":"2019-10-10T13:19:28.632412+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"        \u003cbool\u003e: false\n"}
{"Time":"2019-10-10T13:19:28.632451+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"    to equal\n"}
{"Time":"2019-10-10T13:19:28.632481+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"        \u003cbool\u003e: true\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.632516+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\n"}
{"Time":"2019-10-10T13:19:28.632544+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"    /Users/yuzhipeng/go/src/Algorithm-Datastruct/golang/String/BF/BF_test.go:46\n"}
{"Time":"2019-10-10T13:19:28.63258+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[90m------------------------------\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.632611+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"start is 0Main[start:start+patternlength] is aaaassssdsdsdsds  Pattern is zhipengyuzhipeng\n"}
{"Time":"2019-10-10T13:19:28.632686+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"15 - 0start is 15Main[start:start+patternlength] is s1zhipengyuzhipe  Pattern is zhipengyuzhipeng\n"}
{"Time":"2019-10-10T13:19:28.632845+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"15 - 13\u001b[91m\u001b[1m• Failure [0.001 seconds]\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.632897+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"BF\n"}
{"Time":"2019-10-10T13:19:28.632928+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[90m/Users/yuzhipeng/go/src/Algorithm-Datastruct/golang/String/BF/BF_test.go:10\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.632958+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"  find if there is the pattern\n"}
{"Time":"2019-10-10T13:19:28.632976+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"  \u001b[90m/Users/yuzhipeng/go/src/Algorithm-Datastruct/golang/String/BF/BF_test.go:12\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.632993+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"    \u001b[91m\u001b[1mBM should find the right string [It]\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.633021+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"    \u001b[90m/Users/yuzhipeng/go/src/Algorithm-Datastruct/golang/String/BF/BF_test.go:49\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.63304+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\n"}
{"Time":"2019-10-10T13:19:28.633059+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"    \u001b[91mExpected\n"}
{"Time":"2019-10-10T13:19:28.633077+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"        \u003cbool\u003e: false\n"}
{"Time":"2019-10-10T13:19:28.633094+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"    to equal\n"}
{"Time":"2019-10-10T13:19:28.633116+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"        \u003cbool\u003e: true\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.633137+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\n"}
{"Time":"2019-10-10T13:19:28.633154+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"    /Users/yuzhipeng/go/src/Algorithm-Datastruct/golang/String/BF/BF_test.go:51\n"}
{"Time":"2019-10-10T13:19:28.633179+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[90m------------------------------\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.633533+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[32m•\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.633576+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[90m------------------------------\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.633603+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[91m\u001b[1m• Failure [0.001 seconds]\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.633622+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"BF\n"}
{"Time":"2019-10-10T13:19:28.633639+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[90m/Users/yuzhipeng/go/src/Algorithm-Datastruct/golang/String/BF/BF_test.go:10\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.63366+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"  find if there is the pattern\n"}
{"Time":"2019-10-10T13:19:28.633703+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"  \u001b[90m/Users/yuzhipeng/go/src/Algorithm-Datastruct/golang/String/BF/BF_test.go:12\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.633724+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"    \u001b[91m\u001b[1mGetNeededArray should return the right three array [It]\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.633742+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"    \u001b[90m/Users/yuzhipeng/go/src/Algorithm-Datastruct/golang/String/BF/BF_test.go:59\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.63376+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\n"}
{"Time":"2019-10-10T13:19:28.63378+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"    \u001b[91mExpected\n"}
{"Time":"2019-10-10T13:19:28.633797+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"        \u003c[]int | len:9, cap:9\u003e: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n"}
{"Time":"2019-10-10T13:19:28.633815+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"    to equal\n"}
{"Time":"2019-10-10T13:19:28.633832+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"        \u003c[]int | len:3, cap:3\u003e: [2, 1, 0]\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.633863+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\n"}
{"Time":"2019-10-10T13:19:28.633897+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"    /Users/yuzhipeng/go/src/Algorithm-Datastruct/golang/String/BF/BF_test.go:64\n"}
{"Time":"2019-10-10T13:19:28.633925+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[90m------------------------------\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.63397+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\n"}
{"Time":"2019-10-10T13:19:28.634+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\n"}
{"Time":"2019-10-10T13:19:28.634031+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[91m\u001b[1mSummarizing 3 Failures:\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.634079+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\n"}
{"Time":"2019-10-10T13:19:28.63411+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[91m\u001b[1m[Fail] \u001b[0m\u001b[90mBF \u001b[0m\u001b[0mfind if there is the pattern \u001b[0m\u001b[91m\u001b[1m[It] Rk can find the string \u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.634136+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[37m/Users/yuzhipeng/go/src/Algorithm-Datastruct/golang/String/BF/BF_test.go:46\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.634155+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\n"}
{"Time":"2019-10-10T13:19:28.634182+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[91m\u001b[1m[Fail] \u001b[0m\u001b[90mBF \u001b[0m\u001b[0mfind if there is the pattern \u001b[0m\u001b[91m\u001b[1m[It] BM should find the right string \u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.634215+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[37m/Users/yuzhipeng/go/src/Algorithm-Datastruct/golang/String/BF/BF_test.go:51\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.634235+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\n"}
{"Time":"2019-10-10T13:19:28.634292+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[91m\u001b[1m[Fail] \u001b[0m\u001b[90mBF \u001b[0m\u001b[0mfind if there is the pattern \u001b[0m\u001b[91m\u001b[1m[It] GetNeededArray should return the right three array \u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.634336+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[37m/Users/yuzhipeng/go/src/Algorithm-Datastruct/golang/String/BF/BF_test.go:64\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.634355+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\n"}
{"Time":"2019-10-10T13:19:28.634373+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[1m\u001b[91mRan 8 of 8 Specs in 0.004 seconds\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.634391+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[1m\u001b[91mFAIL!\u001b[0m -- \u001b[32m\u001b[1m5 Passed\u001b[0m | \u001b[91m\u001b[1m3 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.634416+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"--- FAIL: TestBF (0.00s)\n"}
{"Time":"2019-10-10T13:19:28.634434+08:00","Action":"fail","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Elapsed":0}
{"Time":"2019-10-10T13:19:28.634461+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Output":"FAIL\n"}
{"Time":"2019-10-10T13:19:28.634567+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Output":"coverage: 86.7% of statements\n"}
{"Time":"2019-10-10T13:19:28.636674+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Output":"FAIL\tAlgorithm-Datastruct/golang/String/BF\t0.039s\n"}
{"Time":"2019-10-10T13:19:28.636717+08:00","Action":"fail","Package":"Algorithm-Datastruct/golang/String/BF","Elapsed":0.039}
{"Time":"2019-10-10T13:19:28.638916+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree"}
{"Time":"2019-10-10T13:19:28.638967+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"=== RUN   TestTree\n"}
{"Time":"2019-10-10T13:19:28.639408+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"Running Suite: Tree Suite\n"}
{"Time":"2019-10-10T13:19:28.639446+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"=========================\n"}
{"Time":"2019-10-10T13:19:28.639474+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"Random Seed: \u001b[1m1570684768\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.639524+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"Will run \u001b[1m11\u001b[0m of \u001b[1m11\u001b[0m specs\n"}
{"Time":"2019-10-10T13:19:28.63956+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"\n"}
{"Time":"2019-10-10T13:19:28.64144+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0mTree is [29 19 45 18 20 40 50 1] \n"}
{"Time":"2019-10-10T13:19:28.641548+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"no such leaf\u001b[32m•\u001b[0mNew the tree is [100 50 150 25 75 125 200]\u001b[32m•\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.641582+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"\u001b[1m\u001b[32mRan 11 of 11 Specs in 0.002 seconds\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.641649+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m11 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-10-10T13:19:28.641713+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"--- PASS: TestTree (0.00s)\n"}
{"Time":"2019-10-10T13:19:28.641736+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Elapsed":0}
{"Time":"2019-10-10T13:19:28.641762+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Output":"PASS\n"}
{"Time":"2019-10-10T13:19:28.6431+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Output":"coverage: 87.7% of statements\n"}
{"Time":"2019-10-10T13:19:28.646586+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Output":"ok  \tAlgorithm-Datastruct/golang/Tree\t0.038s\tcoverage: 87.7% of statements\n"}
{"Time":"2019-10-10T13:19:28.646636+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Tree","Elapsed":0.038}
{"Time":"2019-10-10T13:19:29.017399+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack"}
{"Time":"2019-10-10T13:19:29.017494+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Output":"=== RUN   TestLinklistStack\n"}
{"Time":"2019-10-10T13:19:29.018041+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Output":"Running Suite: LinklistStack Suite\n"}
{"Time":"2019-10-10T13:19:29.018145+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Output":"==================================\n"}
{"Time":"2019-10-10T13:19:29.018174+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Output":"Random Seed: \u001b[1m1570684769\u001b[0m\n"}
{"Time":"2019-10-10T13:19:29.018209+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Output":"Will run \u001b[1m0\u001b[0m of \u001b[1m0\u001b[0m specs\n"}
{"Time":"2019-10-10T13:19:29.018265+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Output":"\n"}
{"Time":"2019-10-10T13:19:29.019454+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Output":"\n"}
{"Time":"2019-10-10T13:19:29.019528+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Output":"\u001b[1m\u001b[32mRan 0 of 0 Specs in 0.001 seconds\u001b[0m\n"}
{"Time":"2019-10-10T13:19:29.01957+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m0 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-10-10T13:19:29.019664+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Output":"--- PASS: TestLinklistStack (0.00s)\n"}
{"Time":"2019-10-10T13:19:29.019716+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Elapsed":0}
{"Time":"2019-10-10T13:19:29.019743+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Output":"PASS\n"}
{"Time":"2019-10-10T13:19:29.020552+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Output":"coverage: 0.0% of statements\n"}
{"Time":"2019-10-10T13:19:29.022434+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Output":"ok  \tAlgorithm-Datastruct/golang/Stack/linklistStack\t0.034s\tcoverage: 0.0% of statements\n"}
{"Time":"2019-10-10T13:19:29.022519+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Elapsed":0.034}
{"Time":"2019-10-10T13:19:29.025095+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/stackarray","Output":"?   \tAlgorithm-Datastruct/golang/Stack/stackarray\t[no test files]\n"}
{"Time":"2019-10-10T13:19:29.025155+08:00","Action":"skip","Package":"Algorithm-Datastruct/golang/Stack/stackarray","Elapsed":0}
{"Time":"2019-10-10T13:19:29.025224+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BM","Output":"?   \tAlgorithm-Datastruct/golang/String/BM\t[no test files]\n"}
{"Time":"2019-10-10T13:19:29.025254+08:00","Action":"skip","Package":"Algorithm-Datastruct/golang/String/BM","Elapsed":0}
{"Time":"2019-10-10T13:19:29.871466+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap"}
{"Time":"2019-10-10T13:19:29.871549+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Output":"=== RUN   TestHeap\n"}
{"Time":"2019-10-10T13:19:29.872043+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Output":"Running Suite: Heap Suite\n"}
{"Time":"2019-10-10T13:19:29.872105+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Output":"=========================\n"}
{"Time":"2019-10-10T13:19:29.872189+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Output":"Random Seed: \u001b[1m1570684769\u001b[0m\n"}
{"Time":"2019-10-10T13:19:29.872209+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Output":"Will run \u001b[1m7\u001b[0m of \u001b[1m7\u001b[0m specs\n"}
{"Time":"2019-10-10T13:19:29.872248+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Output":"\n"}
{"Time":"2019-10-10T13:19:29.873663+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Output":"\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m[0 14 15 18 20 0][0 20 0 0 0 0]\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\n"}
{"Time":"2019-10-10T13:19:29.87372+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Output":"\u001b[1m\u001b[32mRan 7 of 7 Specs in 0.002 seconds\u001b[0m\n"}
{"Time":"2019-10-10T13:19:29.87386+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m7 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-10-10T13:19:29.873893+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Output":"--- PASS: TestHeap (0.00s)\n"}
{"Time":"2019-10-10T13:19:29.873915+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Elapsed":0}
{"Time":"2019-10-10T13:19:29.873936+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Output":"PASS\n"}
{"Time":"2019-10-10T13:19:29.875754+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Output":"coverage: 95.7% of statements\n"}
{"Time":"2019-10-10T13:19:29.877559+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Output":"ok  \tAlgorithm-Datastruct/golang/heap\t0.036s\tcoverage: 95.7% of statements\n"}
{"Time":"2019-10-10T13:19:29.877602+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/heap","Elapsed":0.036}
{"Time":"2019-10-10T13:19:30.683349+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist"}
{"Time":"2019-10-10T13:19:30.741095+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"=== RUN   TestLinklist\n"}
{"Time":"2019-10-10T13:19:30.75917+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"Running Suite: Linklist Suite\n"}
{"Time":"2019-10-10T13:19:30.801778+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"=============================\n"}
{"Time":"2019-10-10T13:19:30.801883+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"Random Seed: \u001b[1m1570684770\u001b[0m\n"}
{"Time":"2019-10-10T13:19:30.801959+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"Will run \u001b[1m3\u001b[0m of \u001b[1m3\u001b[0m specs\n"}
{"Time":"2019-10-10T13:19:30.801994+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"\n"}
{"Time":"2019-10-10T13:19:30.802035+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"\u001b[32m•\u001b[0m1 -\u003e 2 -\u003e 3 -\u003e 4 -\u003e 5 -\u003e \n"}
{"Time":"2019-10-10T13:19:30.802066+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"5 -\u003e 4 -\u003e 3 -\u003e 2 -\u003e 1 -\u003e 0 -\u003e \n"}
{"Time":"2019-10-10T13:19:30.802086+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\n"}
{"Time":"2019-10-10T13:19:30.802107+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"\u001b[1m\u001b[32mRan 3 of 3 Specs in 0.002 seconds\u001b[0m\n"}
{"Time":"2019-10-10T13:19:30.802126+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m3 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-10-10T13:19:30.802201+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"--- PASS: TestLinklist (0.00s)\n"}
{"Time":"2019-10-10T13:19:30.802222+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Elapsed":0}
{"Time":"2019-10-10T13:19:30.802243+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Output":"PASS\n"}
{"Time":"2019-10-10T13:19:30.803568+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Output":"coverage: 26.6% of statements\n"}
{"Time":"2019-10-10T13:19:30.807706+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Output":"ok  \tAlgorithm-Datastruct/golang/linklist\t0.155s\tcoverage: 26.6% of statements\n"}
{"Time":"2019-10-10T13:19:30.80776+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/linklist","Elapsed":0.157}
{"Time":"2019-10-10T13:19:30.89063+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist"}
{"Time":"2019-10-10T13:19:30.890713+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Output":"=== RUN   TestSkiplist\n"}
{"Time":"2019-10-10T13:19:30.891116+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Output":"Running Suite: Skiplist Suite\n"}
{"Time":"2019-10-10T13:19:30.891197+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Output":"=============================\n"}
{"Time":"2019-10-10T13:19:30.89124+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Output":"Random Seed: \u001b[1m1570684770\u001b[0m\n"}
{"Time":"2019-10-10T13:19:30.891276+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Output":"Will run \u001b[1m1\u001b[0m of \u001b[1m1\u001b[0m specs\n"}
{"Time":"2019-10-10T13:19:30.891306+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Output":"\n"}
{"Time":"2019-10-10T13:19:30.891885+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Output":"\u001b[32m•\u001b[0m\n"}
{"Time":"2019-10-10T13:19:30.891958+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Output":"\u001b[1m\u001b[32mRan 1 of 1 Specs in 0.001 seconds\u001b[0m\n"}
{"Time":"2019-10-10T13:19:30.891988+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m1 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-10-10T13:19:30.892044+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Output":"--- PASS: TestSkiplist (0.00s)\n"}
{"Time":"2019-10-10T13:19:30.892093+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Elapsed":0}
{"Time":"2019-10-10T13:19:30.892137+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Output":"PASS\n"}
{"Time":"2019-10-10T13:19:30.893174+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Output":"coverage: 71.4% of statements\n"}
{"Time":"2019-10-10T13:19:30.895238+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Output":"ok  \tAlgorithm-Datastruct/golang/skiplist\t0.033s\tcoverage: 71.4% of statements\n"}
{"Time":"2019-10-10T13:19:30.895303+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/skiplist","Elapsed":0.034}
