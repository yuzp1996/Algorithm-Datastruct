{"Time":"2019-08-02T10:29:31.658114+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph"}
{"Time":"2019-08-02T10:29:31.664678+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"=== RUN   TestGraph\n"}
{"Time":"2019-08-02T10:29:31.664736+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"Running Suite: Graph Suite\n"}
{"Time":"2019-08-02T10:29:31.664771+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"==========================\n"}
{"Time":"2019-08-02T10:29:31.664788+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"Random Seed: \u001b[1m1564712971\u001b[0m\n"}
{"Time":"2019-08-02T10:29:31.664819+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"Will run \u001b[1m1\u001b[0m of \u001b[1m1\u001b[0m specs\n"}
{"Time":"2019-08-02T10:29:31.664839+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"\n"}
{"Time":"2019-08-02T10:29:31.664861+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"[[0 0 0 0] [0 0 0 0] [0 0 0 0] [0 0 0 0]]\n"}
{"Time":"2019-08-02T10:29:31.664878+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"1 2\n"}
{"Time":"2019-08-02T10:29:31.664894+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"0\n"}
{"Time":"2019-08-02T10:29:31.664909+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"[[0 0 0 0] [0 0 5 0] [0 0 0 0] [0 0 0 0]]\n"}
{"Time":"2019-08-02T10:29:31.664926+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"[[0 0 0 0] [0 0 5 0] [0 0 0 0] [0 0 0 0]]\n"}
{"Time":"2019-08-02T10:29:31.664947+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"3 2\n"}
{"Time":"2019-08-02T10:29:31.664962+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"0\n"}
{"Time":"2019-08-02T10:29:31.664978+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"[[0 0 0 0] [0 0 5 0] [0 0 0 0] [0 0 4 0]]\n"}
{"Time":"2019-08-02T10:29:31.664993+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"\u001b[32m•\u001b[0m\n"}
{"Time":"2019-08-02T10:29:31.665009+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"\u001b[1m\u001b[32mRan 1 of 1 Specs in 0.002 seconds\u001b[0m\n"}
{"Time":"2019-08-02T10:29:31.665025+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m1 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-08-02T10:29:31.66542+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Output":"--- PASS: TestGraph (0.00s)\n"}
{"Time":"2019-08-02T10:29:31.665467+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Test":"TestGraph","Elapsed":0}
{"Time":"2019-08-02T10:29:31.665854+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Output":"PASS\n"}
{"Time":"2019-08-02T10:29:31.665887+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Output":"coverage: 92.9% of statements\n"}
{"Time":"2019-08-02T10:29:31.666329+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Output":"ok  \tAlgorithm-Datastruct/golang/Graph/matrixGraph\t0.046s\tcoverage: 92.9% of statements\n"}
{"Time":"2019-08-02T10:29:31.669447+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Graph/matrixGraph","Elapsed":0.049}
{"Time":"2019-08-02T10:29:32.024051+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch"}
{"Time":"2019-08-02T10:29:32.024155+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Output":"=== RUN   TestBinarySearch\n"}
{"Time":"2019-08-02T10:29:32.02477+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Output":"Running Suite: BinarySearch Suite\n"}
{"Time":"2019-08-02T10:29:32.02483+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Output":"=================================\n"}
{"Time":"2019-08-02T10:29:32.024852+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Output":"Random Seed: \u001b[1m1564712972\u001b[0m\n"}
{"Time":"2019-08-02T10:29:32.024879+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Output":"Will run \u001b[1m6\u001b[0m of \u001b[1m6\u001b[0m specs\n"}
{"Time":"2019-08-02T10:29:32.024912+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Output":"\n"}
{"Time":"2019-08-02T10:29:32.026351+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Output":"\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\n"}
{"Time":"2019-08-02T10:29:32.026456+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Output":"\u001b[1m\u001b[32mRan 6 of 6 Specs in 0.002 seconds\u001b[0m\n"}
{"Time":"2019-08-02T10:29:32.026509+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m6 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-08-02T10:29:32.026571+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Output":"--- PASS: TestBinarySearch (0.00s)\n"}
{"Time":"2019-08-02T10:29:32.026606+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/BinarySearch","Test":"TestBinarySearch","Elapsed":0}
{"Time":"2019-08-02T10:29:32.02663+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Output":"PASS\n"}
{"Time":"2019-08-02T10:29:32.02884+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Output":"coverage: 96.2% of statements\n"}
{"Time":"2019-08-02T10:29:32.03102+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/BinarySearch","Output":"ok  \tAlgorithm-Datastruct/golang/BinarySearch\t0.054s\tcoverage: 96.2% of statements\n"}
{"Time":"2019-08-02T10:29:32.032341+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/BinarySearch","Elapsed":0.056}
{"Time":"2019-08-02T10:29:32.376868+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph"}
{"Time":"2019-08-02T10:29:32.377052+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph","Output":"=== RUN   TestListGraph\n"}
{"Time":"2019-08-02T10:29:32.378833+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph","Output":"0 -\u003e 5 -\u003e 3 -\u003e nil\n"}
{"Time":"2019-08-02T10:29:32.378934+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph","Output":"1 -\u003e 2 -\u003e 4 -\u003e 3 -\u003e nil\n"}
{"Time":"2019-08-02T10:29:32.378971+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph","Output":"2 -\u003e 1 -\u003e 5 -\u003e nil\n"}
{"Time":"2019-08-02T10:29:32.37903+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph","Output":"3 -\u003e 4 -\u003e 1 -\u003e 0 -\u003e nil\n"}
{"Time":"2019-08-02T10:29:32.37905+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph","Output":"4 -\u003e 3 -\u003e 1 -\u003e nil\n"}
{"Time":"2019-08-02T10:29:32.379069+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph","Output":"5 -\u003e 6 -\u003e 2 -\u003e 0 -\u003e nil\n"}
{"Time":"2019-08-02T10:29:32.379088+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph","Output":"6 -\u003e 5 -\u003e nil\n"}
{"Time":"2019-08-02T10:29:32.379704+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph","Output":"--- PASS: TestListGraph (0.00s)\n"}
{"Time":"2019-08-02T10:29:32.379749+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Test":"TestListGraph","Elapsed":0}
{"Time":"2019-08-02T10:29:32.379775+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Output":"PASS\n"}
{"Time":"2019-08-02T10:29:32.380808+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Output":"coverage: 97.4% of statements\n"}
{"Time":"2019-08-02T10:29:32.382791+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Output":"ok  \tAlgorithm-Datastruct/golang/Graph/ListGraph\t0.152s\tcoverage: 97.4% of statements\n"}
{"Time":"2019-08-02T10:29:32.382843+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Graph/ListGraph","Elapsed":0.153}
{"Time":"2019-08-02T10:29:32.574988+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue"}
{"Time":"2019-08-02T10:29:32.575055+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"=== RUN   TestArrayqueue\n"}
{"Time":"2019-08-02T10:29:32.575454+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"Running Suite: Arrayqueue Suite\n"}
{"Time":"2019-08-02T10:29:32.575514+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"===============================\n"}
{"Time":"2019-08-02T10:29:32.575619+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"Random Seed: \u001b[1m1564712972\u001b[0m\n"}
{"Time":"2019-08-02T10:29:32.575697+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"Will run \u001b[1m4\u001b[0m of \u001b[1m4\u001b[0m specs\n"}
{"Time":"2019-08-02T10:29:32.575757+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"\n"}
{"Time":"2019-08-02T10:29:32.577168+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"Can Not Dequeue Now\n"}
{"Time":"2019-08-02T10:29:32.577251+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0mCan Not Enqueue Now\n"}
{"Time":"2019-08-02T10:29:32.577279+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"\u001b[32m•\u001b[0m\n"}
{"Time":"2019-08-02T10:29:32.577298+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"\u001b[1m\u001b[32mRan 4 of 4 Specs in 0.002 seconds\u001b[0m\n"}
{"Time":"2019-08-02T10:29:32.577318+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m4 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-08-02T10:29:32.577371+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Output":"--- PASS: TestArrayqueue (0.00s)\n"}
{"Time":"2019-08-02T10:29:32.577398+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Test":"TestArrayqueue","Elapsed":0}
{"Time":"2019-08-02T10:29:32.577419+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Output":"PASS\n"}
{"Time":"2019-08-02T10:29:32.578007+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Output":"coverage: 65.7% of statements\n"}
{"Time":"2019-08-02T10:29:32.684627+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Output":"ok  \tAlgorithm-Datastruct/golang/Queue/arrayqueue\t0.171s\tcoverage: 65.7% of statements\n"}
{"Time":"2019-08-02T10:29:32.684735+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Queue/arrayqueue","Elapsed":0.172}
{"Time":"2019-08-02T10:29:36.726062+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort"}
{"Time":"2019-08-02T10:29:36.726146+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Output":"=== RUN   TestSort\n"}
{"Time":"2019-08-02T10:29:36.72676+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Output":"Running Suite: Sort Suite\n"}
{"Time":"2019-08-02T10:29:36.726837+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Output":"=========================\n"}
{"Time":"2019-08-02T10:29:36.726898+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Output":"Random Seed: \u001b[1m1564712976\u001b[0m\n"}
{"Time":"2019-08-02T10:29:36.72692+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Output":"Will run \u001b[1m6\u001b[0m of \u001b[1m6\u001b[0m specs\n"}
{"Time":"2019-08-02T10:29:36.726939+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Output":"\n"}
{"Time":"2019-08-02T10:29:36.728323+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Output":"\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\n"}
{"Time":"2019-08-02T10:29:36.728375+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Output":"\u001b[1m\u001b[32mRan 6 of 6 Specs in 0.002 seconds\u001b[0m\n"}
{"Time":"2019-08-02T10:29:36.728396+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m6 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-08-02T10:29:36.728447+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Output":"--- PASS: TestSort (0.00s)\n"}
{"Time":"2019-08-02T10:29:36.728466+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Sort","Test":"TestSort","Elapsed":0}
{"Time":"2019-08-02T10:29:36.728483+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Output":"PASS\n"}
{"Time":"2019-08-02T10:29:36.729667+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Output":"coverage: 88.5% of statements\n"}
{"Time":"2019-08-02T10:29:36.731339+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Sort","Output":"ok  \tAlgorithm-Datastruct/golang/Sort\t0.038s\tcoverage: 88.5% of statements\n"}
{"Time":"2019-08-02T10:29:36.731376+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Sort","Elapsed":0.039}
{"Time":"2019-08-02T10:29:37.348771+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue"}
{"Time":"2019-08-02T10:29:37.348917+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Output":"=== RUN   TestCyclequeue\n"}
{"Time":"2019-08-02T10:29:37.348979+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Output":"Running Suite: Cyclequeue Suite\n"}
{"Time":"2019-08-02T10:29:37.348996+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Output":"===============================\n"}
{"Time":"2019-08-02T10:29:37.349009+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Output":"Random Seed: \u001b[1m1564712977\u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.349101+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Output":"Will run \u001b[1m3\u001b[0m of \u001b[1m3\u001b[0m specs\n"}
{"Time":"2019-08-02T10:29:37.349132+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Output":"\n"}
{"Time":"2019-08-02T10:29:37.350548+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Output":"\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.35063+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Output":"\u001b[1m\u001b[32mRan 3 of 3 Specs in 0.002 seconds\u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.350662+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m3 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.350745+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Output":"--- PASS: TestCyclequeue (0.00s)\n"}
{"Time":"2019-08-02T10:29:37.350765+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Test":"TestCyclequeue","Elapsed":0}
{"Time":"2019-08-02T10:29:37.350782+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Output":"PASS\n"}
{"Time":"2019-08-02T10:29:37.351907+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Output":"coverage: 72.7% of statements\n"}
{"Time":"2019-08-02T10:29:37.355404+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Output":"ok  \tAlgorithm-Datastruct/golang/Queue/cyclequeue\t0.045s\tcoverage: 72.7% of statements\n"}
{"Time":"2019-08-02T10:29:37.35547+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Queue/cyclequeue","Elapsed":0.045}
{"Time":"2019-08-02T10:29:37.381422+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion"}
{"Time":"2019-08-02T10:29:37.381525+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"=== RUN   TestRecursion\n"}
{"Time":"2019-08-02T10:29:37.381775+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"Running Suite: Recursion Suite\n"}
{"Time":"2019-08-02T10:29:37.381858+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"==============================\n"}
{"Time":"2019-08-02T10:29:37.38188+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"Random Seed: \u001b[1m1564712977\u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.381906+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"Will run \u001b[1m3\u001b[0m of \u001b[1m3\u001b[0m specs\n"}
{"Time":"2019-08-02T10:29:37.381928+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"\n"}
{"Time":"2019-08-02T10:29:37.38868+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.388771+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"\u001b[90m------------------------------\u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.388807+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"\u001b[91m\u001b[1m• Failure [0.001 seconds]\u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.388826+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"Recursion\n"}
{"Time":"2019-08-02T10:29:37.388875+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"\u001b[90m/Users/yuzhipeng/go/src/Algorithm-Datastruct/golang/Recursion/Recursion_test.go:9\u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.388897+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"  Arrangement \n"}
{"Time":"2019-08-02T10:29:37.388913+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"  \u001b[90m/Users/yuzhipeng/go/src/Algorithm-Datastruct/golang/Recursion/Recursion_test.go:26\u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.38893+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"    \u001b[91m\u001b[1mArrangement 0 should return 0 [It]\u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.388958+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"    \u001b[90m/Users/yuzhipeng/go/src/Algorithm-Datastruct/golang/Recursion/Recursion_test.go:27\u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.38898+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"\n"}
{"Time":"2019-08-02T10:29:37.388999+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"    \u001b[91mExpected\n"}
{"Time":"2019-08-02T10:29:37.389071+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"        \u003cint\u003e: 8\n"}
{"Time":"2019-08-02T10:29:37.389096+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"    to equal\n"}
{"Time":"2019-08-02T10:29:37.38915+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"        \u003cint\u003e: 6\u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.38917+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"\n"}
{"Time":"2019-08-02T10:29:37.389186+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"    /Users/yuzhipeng/go/src/Algorithm-Datastruct/golang/Recursion/Recursion_test.go:30\n"}
{"Time":"2019-08-02T10:29:37.389213+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"\u001b[90m------------------------------\u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.389235+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"\n"}
{"Time":"2019-08-02T10:29:37.38926+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"\n"}
{"Time":"2019-08-02T10:29:37.389279+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"\u001b[91m\u001b[1mSummarizing 1 Failure:\u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.389385+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"\n"}
{"Time":"2019-08-02T10:29:37.389425+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"\u001b[91m\u001b[1m[Fail] \u001b[0m\u001b[90mRecursion \u001b[0m\u001b[0mArrangement  \u001b[0m\u001b[91m\u001b[1m[It] Arrangement 0 should return 0 \u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.389475+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"\u001b[37m/Users/yuzhipeng/go/src/Algorithm-Datastruct/golang/Recursion/Recursion_test.go:30\u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.389494+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"\n"}
{"Time":"2019-08-02T10:29:37.389513+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"\u001b[1m\u001b[91mRan 3 of 3 Specs in 0.007 seconds\u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.389532+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"\u001b[1m\u001b[91mFAIL!\u001b[0m -- \u001b[32m\u001b[1m2 Passed\u001b[0m | \u001b[91m\u001b[1m1 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.389563+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Output":"--- FAIL: TestRecursion (0.01s)\n"}
{"Time":"2019-08-02T10:29:37.389585+08:00","Action":"fail","Package":"Algorithm-Datastruct/golang/Recursion","Test":"TestRecursion","Elapsed":0.01}
{"Time":"2019-08-02T10:29:37.38961+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Output":"FAIL\n"}
{"Time":"2019-08-02T10:29:37.390299+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Output":"coverage: 91.2% of statements\n"}
{"Time":"2019-08-02T10:29:37.393298+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Recursion","Output":"FAIL\tAlgorithm-Datastruct/golang/Recursion\t0.045s\n"}
{"Time":"2019-08-02T10:29:37.393431+08:00","Action":"fail","Package":"Algorithm-Datastruct/golang/Recursion","Elapsed":0.046}
{"Time":"2019-08-02T10:29:37.405135+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack","Output":"?   \tAlgorithm-Datastruct/golang/Stack\t[no test files]\n"}
{"Time":"2019-08-02T10:29:37.405206+08:00","Action":"skip","Package":"Algorithm-Datastruct/golang/Stack","Elapsed":0}
{"Time":"2019-08-02T10:29:37.545217+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack"}
{"Time":"2019-08-02T10:29:37.545376+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Output":"=== RUN   TestLinklistStack\n"}
{"Time":"2019-08-02T10:29:37.546949+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Output":"Running Suite: LinklistStack Suite\n"}
{"Time":"2019-08-02T10:29:37.547022+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Output":"==================================\n"}
{"Time":"2019-08-02T10:29:37.547042+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Output":"Random Seed: \u001b[1m1564712977\u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.547057+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Output":"Will run \u001b[1m0\u001b[0m of \u001b[1m0\u001b[0m specs\n"}
{"Time":"2019-08-02T10:29:37.547075+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Output":"\n"}
{"Time":"2019-08-02T10:29:37.548148+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Output":"\n"}
{"Time":"2019-08-02T10:29:37.548202+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Output":"\u001b[1m\u001b[32mRan 0 of 0 Specs in 0.001 seconds\u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.548252+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m0 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-08-02T10:29:37.548302+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Output":"--- PASS: TestLinklistStack (0.00s)\n"}
{"Time":"2019-08-02T10:29:37.548331+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Test":"TestLinklistStack","Elapsed":0}
{"Time":"2019-08-02T10:29:37.548351+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Output":"PASS\n"}
{"Time":"2019-08-02T10:29:37.548967+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Output":"coverage: 0.0% of statements\n"}
{"Time":"2019-08-02T10:29:37.55068+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Output":"ok  \tAlgorithm-Datastruct/golang/Stack/linklistStack\t0.035s\tcoverage: 0.0% of statements\n"}
{"Time":"2019-08-02T10:29:37.550735+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Stack/linklistStack","Elapsed":0.035}
{"Time":"2019-08-02T10:29:37.564623+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Stack/stackarray","Output":"?   \tAlgorithm-Datastruct/golang/Stack/stackarray\t[no test files]\n"}
{"Time":"2019-08-02T10:29:37.564664+08:00","Action":"skip","Package":"Algorithm-Datastruct/golang/Stack/stackarray","Elapsed":0}
{"Time":"2019-08-02T10:29:38.838135+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/array","Output":"testing: warning: no tests to run\n"}
{"Time":"2019-08-02T10:29:38.838243+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/array","Output":"PASS\n"}
{"Time":"2019-08-02T10:29:38.839712+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/array","Output":"coverage: 0.0% of statements\n"}
{"Time":"2019-08-02T10:29:38.840701+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/array","Output":"ok  \tAlgorithm-Datastruct/golang/array\t0.014s\tcoverage: 0.0% of statements [no tests to run]\n"}
{"Time":"2019-08-02T10:29:38.840765+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/array","Elapsed":0.014}
{"Time":"2019-08-02T10:29:41.343318+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF"}
{"Time":"2019-08-02T10:29:41.343406+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"=== RUN   TestBF\n"}
{"Time":"2019-08-02T10:29:41.343895+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"Running Suite: BF Suite\n"}
{"Time":"2019-08-02T10:29:41.343965+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"=======================\n"}
{"Time":"2019-08-02T10:29:41.343987+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"Random Seed: \u001b[1m1564712981\u001b[0m\n"}
{"Time":"2019-08-02T10:29:41.344052+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"Will run \u001b[1m2\u001b[0m of \u001b[1m2\u001b[0m specs\n"}
{"Time":"2019-08-02T10:29:41.344072+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\n"}
{"Time":"2019-08-02T10:29:41.345338+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[32m•\u001b[0mdict is map[a:0 b:1 c:2 d:3 e:4 f:5 g:6 h:7 i:8 j:9 k:10 l:11 m:12 n:13 o:14 p:15 q:16 r:17 s:18 t:19 u:20 v:21 w:22 x:23 y:24 z:25]\n"}
{"Time":"2019-08-02T10:29:41.345426+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"map[a:0 b:1 c:2 d:3 e:4 f:5 g:6 h:7 i:8 j:9 k:10 l:11 m:12 n:13 o:14 p:15 q:16 r:17 s:18 t:19 u:20 v:21 w:22 x:23 y:24 z:25]\n"}
{"Time":"2019-08-02T10:29:41.345499+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[32m•\u001b[0m\n"}
{"Time":"2019-08-02T10:29:41.345525+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[1m\u001b[32mRan 2 of 2 Specs in 0.002 seconds\u001b[0m\n"}
{"Time":"2019-08-02T10:29:41.345557+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m2 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-08-02T10:29:41.34559+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Output":"--- PASS: TestBF (0.00s)\n"}
{"Time":"2019-08-02T10:29:41.34561+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/String/BF","Test":"TestBF","Elapsed":0}
{"Time":"2019-08-02T10:29:41.345635+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Output":"PASS\n"}
{"Time":"2019-08-02T10:29:41.3459+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Output":"coverage: 100.0% of statements\n"}
{"Time":"2019-08-02T10:29:41.374333+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/String/BF","Output":"ok  \tAlgorithm-Datastruct/golang/String/BF\t0.076s\tcoverage: 100.0% of statements\n"}
{"Time":"2019-08-02T10:29:41.374403+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/String/BF","Elapsed":0.082}
{"Time":"2019-08-02T10:29:42.156586+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree"}
{"Time":"2019-08-02T10:29:42.156712+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"=== RUN   TestTree\n"}
{"Time":"2019-08-02T10:29:42.157323+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"Running Suite: Tree Suite\n"}
{"Time":"2019-08-02T10:29:42.157383+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"=========================\n"}
{"Time":"2019-08-02T10:29:42.157426+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"Random Seed: \u001b[1m1564712982\u001b[0m\n"}
{"Time":"2019-08-02T10:29:42.157454+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"Will run \u001b[1m11\u001b[0m of \u001b[1m11\u001b[0m specs\n"}
{"Time":"2019-08-02T10:29:42.157496+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"\n"}
{"Time":"2019-08-02T10:29:42.159+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0mTree is [29 19 45 18 20 40 50 1] \n"}
{"Time":"2019-08-02T10:29:42.159131+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"no such leaf\u001b[32m•\u001b[0mNew the tree is [100 50 150 25 75 125 200]\u001b[32m•\u001b[0m\n"}
{"Time":"2019-08-02T10:29:42.159186+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"\u001b[1m\u001b[32mRan 11 of 11 Specs in 0.002 seconds\u001b[0m\n"}
{"Time":"2019-08-02T10:29:42.159226+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m11 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-08-02T10:29:42.159267+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Output":"--- PASS: TestTree (0.00s)\n"}
{"Time":"2019-08-02T10:29:42.159312+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Tree","Test":"TestTree","Elapsed":0}
{"Time":"2019-08-02T10:29:42.159332+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Output":"PASS\n"}
{"Time":"2019-08-02T10:29:42.161228+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Output":"coverage: 87.7% of statements\n"}
{"Time":"2019-08-02T10:29:42.16515+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/Tree","Output":"ok  \tAlgorithm-Datastruct/golang/Tree\t0.043s\tcoverage: 87.7% of statements\n"}
{"Time":"2019-08-02T10:29:42.165198+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/Tree","Elapsed":0.044}
{"Time":"2019-08-02T10:29:42.674586+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap"}
{"Time":"2019-08-02T10:29:42.674704+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Output":"=== RUN   TestHeap\n"}
{"Time":"2019-08-02T10:29:42.676534+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Output":"Running Suite: Heap Suite\n"}
{"Time":"2019-08-02T10:29:42.676604+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Output":"=========================\n"}
{"Time":"2019-08-02T10:29:42.676634+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Output":"Random Seed: \u001b[1m1564712982\u001b[0m\n"}
{"Time":"2019-08-02T10:29:42.676702+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Output":"Will run \u001b[1m7\u001b[0m of \u001b[1m7\u001b[0m specs\n"}
{"Time":"2019-08-02T10:29:42.676744+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Output":"\n"}
{"Time":"2019-08-02T10:29:42.678257+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Output":"\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m[0 14 15 18 20 0][0 20 0 0 0 0]\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\n"}
{"Time":"2019-08-02T10:29:42.678327+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Output":"\u001b[1m\u001b[32mRan 7 of 7 Specs in 0.002 seconds\u001b[0m\n"}
{"Time":"2019-08-02T10:29:42.678349+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m7 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-08-02T10:29:42.678378+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Output":"--- PASS: TestHeap (0.00s)\n"}
{"Time":"2019-08-02T10:29:42.678394+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/heap","Test":"TestHeap","Elapsed":0}
{"Time":"2019-08-02T10:29:42.678412+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Output":"PASS\n"}
{"Time":"2019-08-02T10:29:42.680522+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Output":"coverage: 95.7% of statements\n"}
{"Time":"2019-08-02T10:29:42.687773+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/heap","Output":"ok  \tAlgorithm-Datastruct/golang/heap\t0.069s\tcoverage: 95.7% of statements\n"}
{"Time":"2019-08-02T10:29:42.687842+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/heap","Elapsed":0.07}
{"Time":"2019-08-02T10:29:43.370779+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist"}
{"Time":"2019-08-02T10:29:43.370857+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"=== RUN   TestLinklist\n"}
{"Time":"2019-08-02T10:29:43.371187+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"Running Suite: Linklist Suite\n"}
{"Time":"2019-08-02T10:29:43.371279+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"=============================\n"}
{"Time":"2019-08-02T10:29:43.371298+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"Random Seed: \u001b[1m1564712983\u001b[0m\n"}
{"Time":"2019-08-02T10:29:43.371319+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"Will run \u001b[1m3\u001b[0m of \u001b[1m3\u001b[0m specs\n"}
{"Time":"2019-08-02T10:29:43.371364+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"\n"}
{"Time":"2019-08-02T10:29:43.371639+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"\u001b[32m•\u001b[0m1 -\u003e 2 -\u003e 3 -\u003e 4 -\u003e 5 -\u003e \n"}
{"Time":"2019-08-02T10:29:43.371699+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"5 -\u003e 4 -\u003e 3 -\u003e 2 -\u003e 1 -\u003e 0 -\u003e \n"}
{"Time":"2019-08-02T10:29:43.371736+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"\u001b[32m•\u001b[0m\u001b[32m•\u001b[0m\n"}
{"Time":"2019-08-02T10:29:43.371824+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"\u001b[1m\u001b[32mRan 3 of 3 Specs in 0.001 seconds\u001b[0m\n"}
{"Time":"2019-08-02T10:29:43.371847+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m3 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-08-02T10:29:43.371887+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Output":"--- PASS: TestLinklist (0.00s)\n"}
{"Time":"2019-08-02T10:29:43.371905+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/linklist","Test":"TestLinklist","Elapsed":0}
{"Time":"2019-08-02T10:29:43.371933+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Output":"PASS\n"}
{"Time":"2019-08-02T10:29:43.37306+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Output":"coverage: 26.6% of statements\n"}
{"Time":"2019-08-02T10:29:43.37525+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/linklist","Output":"ok  \tAlgorithm-Datastruct/golang/linklist\t0.038s\tcoverage: 26.6% of statements\n"}
{"Time":"2019-08-02T10:29:43.375299+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/linklist","Elapsed":0.039}
{"Time":"2019-08-02T10:29:45.064722+08:00","Action":"run","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist"}
{"Time":"2019-08-02T10:29:45.064824+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Output":"=== RUN   TestSkiplist\n"}
{"Time":"2019-08-02T10:29:45.06534+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Output":"Running Suite: Skiplist Suite\n"}
{"Time":"2019-08-02T10:29:45.0654+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Output":"=============================\n"}
{"Time":"2019-08-02T10:29:45.065421+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Output":"Random Seed: \u001b[1m1564712985\u001b[0m\n"}
{"Time":"2019-08-02T10:29:45.065452+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Output":"Will run \u001b[1m1\u001b[0m of \u001b[1m1\u001b[0m specs\n"}
{"Time":"2019-08-02T10:29:45.065476+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Output":"\n"}
{"Time":"2019-08-02T10:29:45.066984+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Output":"\u001b[32m•\u001b[0m\n"}
{"Time":"2019-08-02T10:29:45.067088+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Output":"\u001b[1m\u001b[32mRan 1 of 1 Specs in 0.002 seconds\u001b[0m\n"}
{"Time":"2019-08-02T10:29:45.067188+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Output":"\u001b[1m\u001b[32mSUCCESS!\u001b[0m -- \u001b[32m\u001b[1m1 Passed\u001b[0m | \u001b[91m\u001b[1m0 Failed\u001b[0m | \u001b[33m\u001b[1m0 Pending\u001b[0m | \u001b[36m\u001b[1m0 Skipped\u001b[0m\n"}
{"Time":"2019-08-02T10:29:45.067239+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Output":"--- PASS: TestSkiplist (0.00s)\n"}
{"Time":"2019-08-02T10:29:45.067269+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/skiplist","Test":"TestSkiplist","Elapsed":0}
{"Time":"2019-08-02T10:29:45.067292+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Output":"PASS\n"}
{"Time":"2019-08-02T10:29:45.068603+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Output":"coverage: 71.4% of statements\n"}
{"Time":"2019-08-02T10:29:45.070763+08:00","Action":"output","Package":"Algorithm-Datastruct/golang/skiplist","Output":"ok  \tAlgorithm-Datastruct/golang/skiplist\t0.120s\tcoverage: 71.4% of statements\n"}
{"Time":"2019-08-02T10:29:45.070799+08:00","Action":"pass","Package":"Algorithm-Datastruct/golang/skiplist","Elapsed":0.121}
